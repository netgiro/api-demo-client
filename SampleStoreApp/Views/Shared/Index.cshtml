@model NetgiroClient.Models.InsertCartModel
<div class="container">
    <div class="row justify-content-center align-items-center center-container">
        <h2 class="mb-5">
            Demo shop using
            <select id="clientUsed">
                <option value="RestSharpClient">RestSharp</option>
                <option value="HttpClient">HttpClient</option>
            </select>
        </h2>
        <form class="col-12" id="form-container">
            <div class="form-group">
                <label for="amount">Amount</label>
                <input type="text" class="form-control" id="amount" name="amount" onkeyup="this.value=this.value.replace(/[^\d]/,'')">
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <input type="text" class="form-control" id="description" name="description">
            </div>
            <div class="form-group">
                <label for="reference">Reference</label>
                <input type="text" class="form-control" id="reference" name="reference">
            </div>
            <div class="form-group">
                <label for="identifier" class="mb-1">Phone number</label>
                <input type="text" class="form-control" id="identifier" name="identifier">

            </div>
            <div class="form-group mt-5">
                <button type="submit" value="submit" href="@Url.Action("InsertCart")" id="buyBtn" class="btn-primary m-auto">
                    <span id="loaningSpan" class="d-none">
                        <span class="spinner-border spinner-border-sm"></span>
                        Loading..
                    </span>
                    <span id="normalSpan">
                        Buy
                    </span>
                </button>
                <button type="button" value="cancel" id="cancelBtn" class="form-control btn btn-link cancel mt-3">Cancel</button>
            </div>
        </form>
    </div>
    <div id="mobileAppContainer" class="row justify-content-center align-items-center center-container mt-3" style="border: 1px solid black;visibility:hidden">
        <h4 class="mt-2">Customer mobile app simulator</h4>
        <div class="m-2">
            <button type="button" id="confirmRequestBtn" class="btn-info m-auto">Confirm request</button>

        </div>
        <div class="m-2">
            <button type="button" id="rejectRequestBtn" class="btn-info m-auto">Reject request</button>
        </div>
    </div>
</div>
<div class="right-container">
    <h5 class="p-3 bb-inset">Log info</h5>
    <div class="p-3 log-container" id="logContainer">
        No info available.
    </div>
</div>
<input type="hidden" id="cartTransactionId" />

<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script>
    var logger = document.getElementById("logContainer");
    var intervalHandler = -1;
    var cartTransactionId = $("#cartTransactionId");

    function disableBuyBtn(disable) {
        if (disable) {
            $("#buyBtn").prop('disabled', true);
            $("#loaningSpan").removeClass("d-none");
            $("#normalSpan").addClass("d-none");
            $("#mobileAppContainer").css("visibility", "visible");
        }
        else {
            $("#buyBtn").prop('disabled', false);
            $("#loaningSpan").addClass("d-none");
            $("#normalSpan").removeClass("d-none");
            $("#mobileAppContainer").css("visibility", "hidden");
        }
    }

    function logMessage(message) {
        var dt = new Date();
        var time = dt.getHours() + ":" + (dt.getMinutes() < 10 ? '0' : '') + dt.getMinutes() + ":" + (dt.getSeconds() < 10 ? '0' : '') + dt.getSeconds();

        if (typeof message == 'object') {
            logger.innerHTML += time + ' - ' + (JSON && JSON.stringify ? JSON.stringify(message) : message) + '<br />';
        } else {
            logger.innerHTML += time + ' - ' + message + '<br />';
        }
    }

    function showMobileAppContainer(show) {
        if (show) {
            $("#mobileAppContainer").toggle();
        }
        else {
            $("#mobileAppContainer").toggle();
        }
    }

    $("#buyBtn").on("click", function (e) {
        e.preventDefault();

        if ($("#amount").val().length === 0) {
            alert("Enter amount");
            return false;
        }
        if ($("#reference").val().length === 0) {
            alert("Enter reference");
            return false;
        }
        logger.innerHTML = "";
        postFormData();
    });

    $("#cancelBtn").on("click", function (e) {

        cancelCart($("#cartTransactionId").val());
        disableBuyBtn(false);
        window.clearInterval(intervalHandler);
        logMessage("Stoped by cancel button!");
    });

    $("#confirmRequestBtn").on("click", function (e) {
        confirmRequest();
        disableBuyBtn(false);
    });

    $("#rejectRequestBtn").on("click", function (e) {
        rejectRequest();
        disableBuyBtn(false);
    });


    function postFormData() {
        disableBuyBtn(true);
        logMessage("Creating cart...");
        $.ajax({
            url: $("#buyBtn").attr("href"),
            type: "POST",
            data: { amount: $("#amount").val(), description: $("#description").val(), reference: $("#reference").val(), customerId: $("#identifier").val() },
            success: function (result) {
                if (result.success) {
                    var model = $.parseJSON(result.data);
                    var transactionId = model.TransactionId;
                    $("#cartTransactionId").val(model.TransactionId);

                    connection.invoke('RegisterTransactionId', transactionId);

                    logMessage("Cart created!");
                    checkCart(transactionId);

                } else {
                    disableBuyBtn(false);
                    logMessage("Error on cart creation!");
                }
            },
            error: function (result) {
                disableBuyBtn(false);
                logMessage("Error on cart creation!");
            }
        });
    }

    function cancelCart() {
        logMessage("Canceling cart...");
        $.ajax({
            url: "@Url.Action("CancelCart")",
            type: "POST",
            data: { transactionId: $("#cartTransactionId").val() },
            success: function (result) {
                if (result.success) {
                    logMessage("Cart canceled by provider!");
                    window.clearInterval(intervalHandler);
                } else {
                    logMessage("Error on cart canceling!");
                }
            },
            error: function (result) {
                logMessage("Error on cart canceling!");
            }
        });
    }


    function checkCart(data) {
        if (data == undefined) {
            data = "";
        }

        logMessage("Checking cart...");

        var checkingFunction = function () {
            $.ajax({
                url: "@Url.Action("CheckCart")",
                data: { transactionId: data },
                type: "POST",
                success: function (result) {
                    if (result.success) {
                        var model = $.parseJSON(result.data);
                        if (model.Success && model.PaymentSuccessful) {
                            disableBuyBtn(false);
                            window.clearInterval(intervalHandler);
                            logMessage("SUCCESS! Loan created.");
                        }
                        else {
                            // These are result codes when cart is canceled
                            if (model.ResultCode == 10201) {
                                disableBuyBtn(false);
                                window.clearInterval(intervalHandler);
                                logMessage("Cart canceled!");

                            }
                            else if (model.Message != null && model.Message != "") {
                                logMessage(model.Message);
                            }
                            else {
                                logMessage("Sale not confirmed! Checking again...");
                            }
                        }
                    }
                },
                error: function (result) {
                    disableBuyBtn(false);
                    window.clearInterval(intervalHandler);
                    logMessage("Error on checking cart!");
                }
            });
        };

        intervalHandler = window.setInterval(checkingFunction, 3000);
    }


     function confirmRequest() {
        logMessage("Customer initiated confirm request");

        $.ajax({
            url: "@Url.Action("ConfirmCart")",
            type: "POST",
            data: { transactionId: $("#cartTransactionId").val(), confirm: true },
            success: function (result) {
                if (result.success) {
                    logMessage("Cart confirmed by customer!");
                } else {
                    logMessage("Error on confirm request!");
                    window.clearInterval(intervalHandler);
                }
            },
            error: function (result) {
                logMessage("Error on confirm request!");
            }
        });
    }

     function rejectRequest() {
        logMessage("Customer initiated reject request");
        $.ajax({
            url: "@Url.Action("ConfirmCart")",
            type: "POST",
            data: { transactionId: $("#cartTransactionId").val(), confirm: false },
            success: function (result) {
                if (result.success) {
                    logMessage("Cart rejected by customer!");

                } else {
                    logMessage("Error on confirm request!");
                }
            },
            error: function (result) {
                logMessage("Error on reject request!");
            }
        });
    }



    var connection = new signalR.HubConnectionBuilder().withUrl("/paymentHub").build();

    connection.on("ReceiveMessage", function (user, message) {
        logMessage(message);
    });

    connection.start().then(function () {
    }).catch(function (err) {
        return console.error(err.toString());
    });
</script>